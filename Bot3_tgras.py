import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    PicklePersistence,
    PersistenceInput
)
from datetime import datetime
import pytz
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7983764759:AAHods3z0lDWP2rmQIE9FOZUajLG3GyNVls"
ADMIN_ID = 7757791357  # –í–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_WAITING_WHITELIST = 1
STATE_WAITING_APPLICATION = 2
STATE_WAITING_CHANNEL = 3
STATE_WAITING_DISCOUNT_TEXT = 4
STATE_WAITING_DATETIME = 5
STATE_CHECK_RIGHTS = 6
STATE_WAITING_BROADCAST_TEXT = 7
STATE_WAITING_BROADCAST_TIME = 8
STATE_WAITING_ADMIN_CHANNEL = 9
STATE_WAITING_ADMIN_POST_TEXT = 10
STATE_WAITING_ADMIN_POST_TIME = 11
STATE_WAITING_UN_WHITELIST = 12  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_default_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùì"), KeyboardButton("‚úîÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¢–ì–ö ‚úîÔ∏è")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

def get_approved_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùì"), KeyboardButton("‚úîÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¢–ì–ö ‚úîÔ∏è")],
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ‚ûï"), KeyboardButton("üí∞–°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—Éüí∞")],
            [KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùì"), KeyboardButton("‚úîÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¢–ì–ö ‚úîÔ∏è")],
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ‚ûï"), KeyboardButton("üí∞–°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—Éüí∞")],
            [KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¢–ì –∫–∞–Ω–∞–ª–æ–≤")],
            [KeyboardButton("üì¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –°–∫–∏–¥–æ–Ω"), KeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

def get_approval_keyboard(application_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{application_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{application_id}")
        ]
    ])

async def setup_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("check_rights", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"),
        BotCommand("whitelist", "–î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (–∞–¥–º–∏–Ω)"),
        BotCommand("un_whitelist", "–£–¥–∞–ª–∏—Ç—å –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("show_whitelist", "–ü–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (–∞–¥–º–∏–Ω)")
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_approved = user_id in context.bot_data.get('whitelist', set())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    if 'subscribers' not in context.bot_data:
        context.bot_data['subscribers'] = set()
    context.bot_data['subscribers'].add(user_id)
    
    welcome_text = "–ù–µ –≤—ã–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç—ã –±—É–¥–µ—à—å —É–∑–Ω–∞–≤–∞—Ç—å 1-–º –æ —Å–∫–∏–¥–∫–∞—Ö/–∫–æ–Ω–∫—É—Ä—Å–∞—Ö –≤–æ –≤—Å–µ—Ö –ü–†–û–í–ï–†–ï–ù–ù–´–• —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞—Ö."
    
    if user_id == ADMIN_ID:
        await update.message.reply_text(welcome_text, reply_markup=get_admin_keyboard())
    elif is_approved:
        await update.message.reply_text(welcome_text, reply_markup=get_approved_keyboard())
    else:
        await update.message.reply_text(welcome_text, reply_markup=get_default_keyboard())

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = """–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞: 
-–ù–∞–¥–æ–µ–ª–∞ –∫—É—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π? 
-–û—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? 
-–£—Å—Ç–∞–ª, –¥–æ—Ä–æ–≥–æ? 
–¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É. 

**–û–°–¢–ê–í–õ–Ø–ô –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø** –∏ —É–∑–Ω–∞–≤–∞–π 1-–π –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –≤ –∫–∞–Ω–∞–ª–∞—Ö —Å –æ–¥–µ–∂–¥–æ–π

- - - - - - - - - - - - - - - - - - - - - - -

–ò –¥–∞ –º–æ–∂–µ—à—å –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å! –ú—É—Å–æ—Ä–æ–∫ —Å 100 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ –Ω–µ—Ç,
—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–µ–º –∫–∞–Ω–∞–ª—ã,
—Å —Ö–æ—Ä–æ—à–∏–º –Ω–∞–ª–∏—á–∏–µ–º –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º."""
    await update.message.reply_text(info_text)

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
    channels = context.bot_data.get('channels', [])
    
    if not channels:
        await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ë–æ—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª")
        return
    
    message = "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –±–æ—Ç–æ–º:\n\n"
    for i, channel in enumerate(channels, 1):
        message += f"{i}. {channel}\n"
    
    await update.message.reply_text(message)

async def start_discount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞")
        return
    
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname, –∫—É–¥–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç:",
        reply_markup=get_admin_keyboard()
    )
    context.user_data['state'] = STATE_WAITING_ADMIN_CHANNEL

async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞")
        return
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:",
        reply_markup=get_admin_keyboard()
    )
    context.user_data['state'] = STATE_WAITING_BROADCAST_TEXT

async def send_broadcast(context: ContextTypes.DEFAULT_TYPE):
    if 'broadcast_text' not in context.bot_data:
        logger.error("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bot_data")
        return
    
    text = context.bot_data['broadcast_text']
    subscribers = context.bot_data.get('subscribers', set())
    
    if not subscribers:
        logger.error("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text="‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        return
    
    success = 0
    failed = 0
    
    for user_id in subscribers:
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
            success += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
    
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )

async def schedule_broadcast(context: ContextTypes.DEFAULT_TYPE, broadcast_time: datetime):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    now = datetime.now(MOSCOW_TZ)
    delay = (broadcast_time - now).total_seconds()
    
    if delay > 0:
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay)
        await send_broadcast(context)
    else:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text="‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
        )

async def schedule_post(context: ContextTypes.DEFAULT_TYPE, channel: str, post_text: str, post_time: datetime):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    now = datetime.now(MOSCOW_TZ)
    delay = (post_time - now).total_seconds()
    
    if delay > 0:
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(delay)
        try:
            # –£–¥–∞–ª—è–µ–º @ –∏–∑ –Ω–∞—á–∞–ª–∞ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            channel = channel.lstrip('@')
            await context.bot.send_message(chat_id=f"@{channel}", text=post_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
            if 'channels' not in context.bot_data:
                context.bot_data['channels'] = []
            if channel not in context.bot_data['channels']:
                context.bot_data['channels'].append(channel)
            
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @{channel} –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:\n\n{post_text}"
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ @{channel}: {e}"
            )
    else:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text="‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ—Å—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."
        )

async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–ì–ö:\nID: {user.id}\nUsername: @{user.username if user.username else '–Ω–µ—Ç'}\n–ò–º—è: {user.full_name}"
    )
    
    text = "–≠–¢–û –ë–ï–°–ü–õ–ê–¢–ù–û –ü—Ä–∏–≤–µ—Ç, —Ö–æ—á–µ—à—å —á—Ç–æ –±—ã bot –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–≤–æ–∏ —Å–∫–∏–¥–∫–∏/–∞–∫—Ü–∏–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º? –ñ–º–∏ –∫–Ω–æ–ø–∫—É: ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª"
    keyboard = [[InlineKeyboardButton("¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª", callback_data='send_application')]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def add_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{context.bot.username}?startchannel&admin=post_messages")],
        [InlineKeyboardButton("‚úÖ –Ø –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞", callback_data="bot_added")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    instructions = (
        "–ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª\n"
        "3. –ù–∞–∑–Ω–∞—á—å—Ç–µ –ø—Ä–∞–≤–∞:\n"
        "   - ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "4. –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞¬ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    
    await update.message.reply_text(instructions, reply_markup=reply_markup)

async def check_channel_rights(bot, channel_username):
    try:
        channel_username = channel_username.lstrip('@')
        chat = await bot.get_chat(f"@{channel_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        try:
            member = await chat.get_member(bot.id)
            if not member.status == "administrator":
                return False, "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞"
            
            if not member.can_post_messages:
                return False, "‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            return True, "‚úÖ –í—Å–µ –ø—Ä–∞–≤–∞ –≤ –ø–æ—Ä—è–¥–∫–µ: –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
            
        except Exception as e:
            return False, f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        
    except Exception as e:
        return False, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n2. –í—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channelname)"

async def check_rights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞:",
        reply_markup=get_approved_keyboard()
    )
    context.user_data['state'] = STATE_CHECK_RIGHTS

async def create_discount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in context.bot_data.get('whitelist', set()):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞")
        return
    
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname:",
        reply_markup=get_approved_keyboard()
    )
    context.user_data['state'] = STATE_WAITING_CHANNEL

async def whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:",
        reply_markup=get_admin_keyboard()
    )
    context.user_data['state'] = STATE_WAITING_WHITELIST
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")

async def un_whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_admin_keyboard()
    )
    context.user_data['state'] = STATE_WAITING_UN_WHITELIST
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞")

async def show_whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    whitelist = context.bot_data.get('whitelist', set())
    if not whitelist:
        await update.message.reply_text("–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return
    
    message = "üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(str(user_id) for user_id in whitelist)
    await update.message.reply_text(message)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'send_application':
        user = query.from_user
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É:\nID: {user.id}\nUsername: @{user.username if user.username else '–Ω–µ—Ç'}"
        )
        
        await query.edit_message_text("–ó–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –º–Ω–µ:\n–∂–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ (–æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è —Å–∞–º).")
        
        form_text = """```
–í–∞—à –Ω–∏–∫ —Å @:
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:
–ö–∞–∫ —á–∞—Å—Ç–æ —É –≤–∞—Å –±—ã–≤–∞—é—Ç —Å–∫–∏–¥–∫–∏:
–ö–∞–∫ —á–∞—Å—Ç–æ —É –≤–∞—Å –±—ã–≤–∞—é—Ç –∫–æ–Ω–∫—É—Ä—Å—ã:
–¶–µ–ª—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞—Å—Å—ã–ª–∫–∏:
```"""
        await context.bot.send_message(chat_id=query.message.chat_id, text=form_text, parse_mode='Markdown')
        context.user_data['state'] = STATE_WAITING_APPLICATION
    
    elif query.data == 'bot_added':
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞:",
            reply_markup=None
        )
        context.user_data['state'] = STATE_CHECK_RIGHTS
        context.user_data['after_add'] = True
    
    elif query.data.startswith('approve_'):
        application_id = query.data.split('_')[1]
        original_message = query.message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        lines = original_message.split('\n')
        user_info = lines[0]
        
        try:
            # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "ID:" in user_info:
                user_id = int(user_info.split("ID:")[1].strip().split(")")[0])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
                if 'whitelist' not in context.bot_data:
                    context.bot_data['whitelist'] = set()
                context.bot_data['whitelist'].add(user_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if 'subscribers' not in context.bot_data:
                    context.bot_data['subscribers'] = set()
                context.bot_data['subscribers'].add(user_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await context.application.persistence.flush()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ —Å –°–∫–∏–¥–∫–æ–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –±–æ—Ç–µ –∏ –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.",
                        reply_markup=get_approved_keyboard()
                    )
                    await query.edit_message_text(
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\n{original_message}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    await query.edit_message_text(
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{original_message}"
                    )
            else:
                raise ValueError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}"
            )
    
    elif query.data.startswith('reject_'):
        application_id = query.data.split('_')[1]
        original_message = query.message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        lines = original_message.split('\n')
        user_info = lines[0]
        
        try:
            # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "ID:" in user_info:
                user_id = int(user_info.split("ID:")[1].strip().split(")")[0])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ '–°–∫–∏–¥–∫–∏' –≤–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –µ—â—ë —Ä–∞–∑."
                    )
                    await query.edit_message_text(
                        f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:\n{original_message}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    await query.edit_message_text(
                        f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{original_message}"
                    )
            else:
                raise ValueError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}"
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {text}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id == ADMIN_ID:
        if context.user_data.get('state') == STATE_WAITING_WHITELIST:
            try:
                user_id = int(text.strip())
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è whitelist, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if 'whitelist' not in context.bot_data:
                    context.bot_data['whitelist'] = set()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
                context.bot_data['whitelist'].add(user_id)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è subscribers, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if 'subscribers' not in context.bot_data:
                    context.bot_data['subscribers'] = set()
                context.bot_data['subscribers'].add(user_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await context.application.persistence.flush()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="üéâ –í–∞—à –∫–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
                        reply_markup=get_approved_keyboard()
                    )
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                        reply_markup=get_admin_keyboard()
                    )
                except Exception as e:
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}",
                        reply_markup=get_admin_keyboard()
                    )
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
                    reply_markup=get_admin_keyboard()
                )
            finally:
                context.user_data.pop('state', None)
                return
        
        elif context.user_data.get('state') == STATE_WAITING_UN_WHITELIST:
            try:
                user_id = int(text.strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ whitelist
                if 'whitelist' not in context.bot_data:
                    context.bot_data['whitelist'] = set()
                    await update.message.reply_text(
                        "‚ÑπÔ∏è –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –±—ã–ª –ø—É—Å—Ç, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π",
                        reply_markup=get_admin_keyboard()
                    )
                    context.user_data.pop('state', None)
                    return
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
                if user_id in context.bot_data['whitelist']:
                    context.bot_data['whitelist'].remove(user_id)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    await context.application.persistence.flush()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="‚ùå –í–∞—à –∫–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                            reply_markup=get_default_keyboard()
                        )
                        await update.message.reply_text(
                            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω.",
                            reply_markup=get_admin_keyboard()
                        )
                    except Exception as e:
                        await update.message.reply_text(
                            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}",
                            reply_markup=get_admin_keyboard()
                        )
                else:
                    await update.message.reply_text(
                        f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ",
                        reply_markup=get_admin_keyboard()
                    )
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
                    reply_markup=get_admin_keyboard()
                )
            finally:
                context.user_data.pop('state', None)
                return
            
        elif context.user_data.get('state') == STATE_WAITING_ADMIN_CHANNEL:
            context.user_data['admin_channel'] = text
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:",
                reply_markup=get_admin_keyboard()
            )
            context.user_data['state'] = STATE_WAITING_ADMIN_POST_TEXT
            return
        
        elif context.user_data.get('state') == STATE_WAITING_ADMIN_POST_TEXT:
            context.user_data['admin_post_text'] = text
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –ú–æ—Å–∫–≤–µ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
                reply_markup=get_admin_keyboard()
            )
            context.user_data['state'] = STATE_WAITING_ADMIN_POST_TIME
            return
        
        elif context.user_data.get('state') == STATE_WAITING_ADMIN_POST_TIME:
            channel = context.user_data['admin_channel']
            post_text = context.user_data['admin_post_text']
            post_time = text
            
            try:
                post_time = datetime.strptime(post_time, "%d.%m.%Y %H:%M")
                post_time = MOSCOW_TZ.localize(post_time)
                
                if post_time < datetime.now(MOSCOW_TZ):
                    await update.message.reply_text(
                        "‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.",
                        reply_markup=get_admin_keyboard()
                    )
                    return
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ {channel} –≤ {post_time.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=get_admin_keyboard()
                )
                asyncio.create_task(schedule_post(context, channel, post_text, post_time))
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
                    reply_markup=get_admin_keyboard()
                )
            finally:
                context.user_data.pop('state', None)
                return
        
        elif context.user_data.get('state') == STATE_WAITING_BROADCAST_TEXT:
            context.bot_data['broadcast_text'] = text
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ú–æ—Å–∫–≤–µ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
                reply_markup=get_admin_keyboard()
            )
            context.user_data['state'] = STATE_WAITING_BROADCAST_TIME
            return
        
        elif context.user_data.get('state') == STATE_WAITING_BROADCAST_TIME:
            try:
                broadcast_time = datetime.strptime(text, "%d.%m.%Y %H:%M")
                broadcast_time = MOSCOW_TZ.localize(broadcast_time)
                
                if broadcast_time < datetime.now(MOSCOW_TZ):
                    await update.message.reply_text(
                        "‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.",
                        reply_markup=get_admin_keyboard()
                    )
                    return
                
                await update.message.reply_text(
                    f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {broadcast_time.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=get_admin_keyboard()
                )
                asyncio.create_task(schedule_broadcast(context, broadcast_time))
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
                    reply_markup=get_admin_keyboard()
                )
            finally:
                context.user_data.pop('state', None)
                return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    if context.user_data.get('state') == STATE_WAITING_APPLICATION:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username if user.username else '–Ω–µ—Ç_username'} (ID: {user.id}):\n{text}"
        )
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")
        context.user_data.pop('state', None)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    if context.user_data.get('state') == STATE_CHECK_RIGHTS:
        channel_username = text.lstrip('@')
        checking_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞...")
        
        success, result = await check_channel_rights(context.bot, channel_username)
        
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=checking_msg.message_id
        )
        
        if success:
            response = f"{result}\n\n‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞
            if 'channels' not in context.bot_data:
                context.bot_data['channels'] = []
            if channel_username not in context.bot_data['channels']:
                context.bot_data['channels'].append(channel_username)
        else:
            response = f"{result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞."
        
        if context.user_data.get('after_add'):
            response += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üí∞–°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—Éüí∞¬ª"
            context.user_data.pop('after_add', None)
        
        await update.message.reply_text(
            response,
            reply_markup=get_approved_keyboard()
        )
        context.user_data.pop('state', None)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏
    if context.user_data.get('state') == STATE_WAITING_CHANNEL:
        context.user_data['channel'] = text
        context.user_data['user_username'] = f"@{user.username}" if user.username else f"ID:{user.id}"
        context.user_data['user_id'] = user.id
        await update.message.reply_text("–ü–†–ò–®–õ–ò–¢–ï –¢–ï–ö–°–¢ –°–ö–ò–î–ö–ò, –Ω–∞–ø—Ä–∏–º–µ—Ä - –°–∫–∏–¥–∫–∞ 44% –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –Ω–∞ –≤–µ—Å—å —Ç–æ–≤–∞—Ä, –∏—â–∏ #–≤–Ω–∞–ª–∏—á–∏–∏@–≤–∞—à_–∫–∞–Ω–∞–ª:")
        context.user_data['state'] = STATE_WAITING_DISCOUNT_TEXT
        return
    
    if context.user_data.get('state') == STATE_WAITING_DISCOUNT_TEXT:
        context.user_data['discount_text'] = text
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ù–∞–ø—Ä–∏–º–µ—Ä: (20.09.2025 12:00):")
        context.user_data['state'] = STATE_WAITING_DATETIME
        return
    
    if context.user_data.get('state') == STATE_WAITING_DATETIME:
        username = context.user_data.get('user_username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        user_id = context.user_data.get('user_id', None)
        application_id = f"{user_id}_{int(update.message.date.timestamp())}"
        
        message_text = (
            f"‚è∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–∫–∏–¥–∫—É –æ—Ç {username} (ID: {user_id}):\n"
            f"–ö–∞–Ω–∞–ª: {context.user_data['channel']}\n"
            f"–¢–µ–∫—Å—Ç: {context.user_data['discount_text']}\n"
            f"–í—Ä–µ–º—è: {text}"
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=message_text,
            reply_markup=get_approval_keyboard(application_id)
        )
        
        await update.message.reply_text("‚úÖ –°–∫–∏–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        context.user_data.pop('state', None)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if update.message.text == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùì":
        await info(update, context)
    elif update.message.text == "‚úîÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¢–ì–ö ‚úîÔ∏è":
        await add_channel(update, context)
    elif update.message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ‚ûï":
        await add_to_channel(update, context)
    elif update.message.text == "üí∞–°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—Éüí∞":
        await create_discount(update, context)
    elif update.message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞":
        await check_rights(update, context)
    elif update.message.text == "üì¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –°–∫–∏–¥–æ–Ω" and update.effective_user.id == ADMIN_ID:
        await start_discount(update, context)
    elif update.message.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º" and update.effective_user.id == ADMIN_ID:
        await start_broadcast(update, context)
    elif update.message.text == "üìã –°–ø–∏—Å–æ–∫ –¢–ì –∫–∞–Ω–∞–ª–æ–≤" and update.effective_user.id == ADMIN_ID:
        await list_channels(update, context)

def main():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PicklePersistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    persistence = PicklePersistence(
        filepath='bot_data.pickle',
        store_data=PersistenceInput(
            bot_data=True,    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (–≤–∫–ª—é—á–∞—è –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)
            chat_data=False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤
            user_data=False   # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )
    )
    
    application = Application.builder() \
        .token(BOT_TOKEN) \
        .persistence(persistence) \
        .post_init(setup_commands) \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("whitelist", whitelist))
    application.add_handler(CommandHandler("un_whitelist", un_whitelist))
    application.add_handler(CommandHandler("check_rights", check_rights))
    application.add_handler(CommandHandler("show_whitelist", show_whitelist))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex(r'‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùì'), info))
    application.add_handler(MessageHandler(filters.Regex(r'‚úîÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¢–ì–ö ‚úîÔ∏è'), add_channel))
    application.add_handler(MessageHandler(filters.Regex(r'‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ‚ûï'), add_to_channel))
    application.add_handler(MessageHandler(filters.Regex(r'üí∞–°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—Éüí∞'), create_discount))
    application.add_handler(MessageHandler(filters.Regex(r'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞'), check_rights))
    application.add_handler(MessageHandler(filters.Regex(r'üì¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –°–∫–∏–¥–æ–Ω') & filters.User(ADMIN_ID), start_discount))
    application.add_handler(MessageHandler(filters.Regex(r'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º') & filters.User(ADMIN_ID), start_broadcast))
    application.add_handler(MessageHandler(filters.Regex(r'üìã –°–ø–∏—Å–æ–∫ –¢–ì –∫–∞–Ω–∞–ª–æ–≤') & filters.User(ADMIN_ID), list_channels))
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()